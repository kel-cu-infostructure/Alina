plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'

archives_base_name = project.archives_base_name
group = project.maven_group
version = project.version

repositories {
    mavenCentral()
    maven { url = "https://jitpack.io" }
    maven { url = "https://maven.google.com" }
    maven { url = "https://m2.dv8tion.net/releases" }
    maven { url = "https://maven.topi.wtf/releases" }
    maven { url = "https://maven.arbjerg.dev/releases" }
    maven { url = "https://maven.arbjerg.dev/snapshots" }
}

configurations { shadow }
dependencies {
    shadow implementation('org.projectlombok:lombok:1.18.26')
    shadow implementation('org.projectlombok:lombok:1.18.26')
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    // Libs
    shadow implementation("ch.qos.logback:logback-classic:1.4.14")
    shadow implementation('net.dv8tion:JDA:5.0.0-beta.23')
    // Music
    shadow implementation("dev.arbjerg:lavaplayer:727959e9f621fc457b3a5adafcfffb55fdeaa538-SNAPSHOT")
    shadow implementation('com.github.aikaterna:lavaplayer-natives:original-SNAPSHOT')
    shadow implementation("com.github.topi314.lavasrc:lavasrc:4.0.1")
    shadow implementation("com.github.topi314.lavasrc:lavasrc-protocol:4.0.1")
    // JSON
    shadow implementation("com.google.code.gson:gson:2.10.1")
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

test {
    useJUnitPlatform()
}

// Produce additional distributions
java {
    withSourcesJar()
}

// Produce a fat-jar of all shaded dependencies

components.java.withVariantsFromConfiguration(configurations.shadowRuntimeElements) { skip() }

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
    manifest {
        attributes(
                'Main-Class': 'ru.kelcuprum.alina.Alina'
        )
    }
}